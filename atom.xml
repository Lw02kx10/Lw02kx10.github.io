<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wen&#39;s blog</title>
  
  
  <link href="https://lw02kx10.github.io/atom.xml" rel="self"/>
  
  <link href="https://lw02kx10.github.io/"/>
  <updated>2023-01-20T09:07:14.237Z</updated>
  <id>https://lw02kx10.github.io/</id>
  
  <author>
    <name>Wen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Selenium-Webdriver</title>
    <link href="https://lw02kx10.github.io/2023/01/20/Selenium-Webdriver/"/>
    <id>https://lw02kx10.github.io/2023/01/20/Selenium-Webdriver/</id>
    <published>2023-01-20T04:09:40.000Z</published>
    <updated>2023-01-20T09:07:14.237Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Selenium</strong>用于实现网页的自动化操作，可跨浏览器使用，也可跨语言使用，在<strong>php</strong>，<strong>Java</strong>，<strong>python</strong>等多门语言中均可使用。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先需要安装<strong>selenium</strong>库，可根据<strong>python</strong>环境使用<strong>conda</strong>安装或<strong>pip</strong>安装，<code>pip install selenium</code>，安装成功后进入<strong>python</strong>交互环境，在<code>import selenium</code>没有报错的情况下，说明安装成功。</p><p>之后还需要为浏览器下载<strong>webdriver</strong>驱动，在 <a href="https://www.selenium.dev/downloads/">Downloads | Selenium</a> 中找到自己要驱动的浏览器并且下载对应的版本，版本号要与当前浏览器的版本相符，不然会出现启动浏览器后网址会只显示data;，的情况。不过也问题不大。</p><p><strong>webdriver</strong>下载好后的<strong>exe</strong>文件，可以放在自己的<strong>python</strong>安装目录下，这是省去了为<strong>webdriver</strong>配置环境变量的麻烦。</p><span id="more"></span><h2 id="操作浏览器"><a href="#操作浏览器" class="headerlink" title="操作浏览器"></a>操作浏览器</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>尝试打开一个页面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#以Edge浏览器为例</span></span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line"><span class="comment">#使用get(url)方法来打开一个网页</span></span><br><span class="line">browser.get(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>页面打开时并不是最大化的，如果我们想要最大化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置打开页面的长和宽</span></span><br><span class="line">browser.set_window_size(<span class="number">700</span>,<span class="number">400</span>)</span><br><span class="line"><span class="comment">#或直接使用最大化命令</span></span><br><span class="line">browser.maximize_window()</span><br></pre></td></tr></table></figure><p>实现浏览器的几个基本操作命令：<strong>前进，后退，刷新，退出</strong>。使用<strong>time</strong>时间库来给浏览器操作网页一定的时间，更符合人操作网页的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser.get(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)  <span class="comment">#停留两秒</span></span><br><span class="line">browser.back()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.forward()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.refresh()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.quit() <span class="comment">#关闭浏览器</span></span><br></pre></td></tr></table></figure><p>实现拖拽窗口，和下拉滚动条， 但是调用滚动轴的相关的命令在<strong>selenium</strong>库中没有，但我们可以通过使用<strong>JavaScript</strong>的<strong>DOM</strong>操作来模拟操作。这句命令为<code>browser.execute_script([Js_DOM])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js_code = <span class="string">&quot;document.documentElement.scrollTop = 10000&quot;</span></span><br><span class="line">browser.execute_script(js_code)</span><br></pre></td></tr></table></figure><h3 id="Cookie的调用"><a href="#Cookie的调用" class="headerlink" title="Cookie的调用"></a>Cookie的调用</h3><p><strong>selenium</strong>为我们提供了以下的<strong>cookie</strong>调用方法：</p><blockquote><p><strong>get_cookies():</strong> 获得所有 cookie 信息。</p><p><strong>delete_all_cookies()：</strong>删除所有 cookie 信息。 </p><p><strong>get_cookie([name])：</strong>返回字典的 key 为[name]的 cookie 。 </p><p><strong>add_cookie(cookie_dict)：</strong>添加 cookie。“cookie_dict”指字典对象，必须有 name 和 value 两个值。 </p><p><strong>delete_cookie([name],[optionsString])：</strong>删除 cookie 信息。[name]是要删除的 cookie 的名称。第二个参数[optionsString]是 cookie 选项，目前支持的选项包括“路径”， “域”  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser.get(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line">cookies = browser.get_cookies()</span><br><span class="line">cookie = browser.get_cookie(<span class="string">&#x27;BAIDUID&#x27;</span>)</span><br><span class="line">browser.add_cookie(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;20&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="用JavaScript代码协助实现页面多开"><a href="#用JavaScript代码协助实现页面多开" class="headerlink" title="用JavaScript代码协助实现页面多开"></a>用JavaScript代码协助实现页面多开</h3><p>我们在日常操作浏览器中总是希望打开另外一个页面，而又舍不得关闭现在的页面。或是现在的页面依旧有他的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">browser.get(<span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入的js代码只是为一串字符串</span></span><br><span class="line">js_code = <span class="string">&quot;window.open(&#x27;https://another.com&#x27;);&quot;</span></span><br><span class="line">browser.execute_script(js_code)</span><br></pre></td></tr></table></figure><h2 id="页面的HTML节点定位"><a href="#页面的HTML节点定位" class="headerlink" title="页面的HTML节点定位"></a>页面的HTML节点定位</h2><p><strong>selenium</strong>提供<code>browser.find_element(by,detail)</code>来定位节点元素，如获取百度首页的输入框和搜索按钮：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ID选择定位元素</span></span><br><span class="line">input_node = browser.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">submit_btn = browser.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"></span><br><span class="line">input_node.send_keys(<span class="string">&quot;github&quot;</span>)</span><br><span class="line">submit_btn.click()</span><br></pre></td></tr></table></figure><p>除了使用<code>By.ID</code>，还可以使用<strong>CSS_SELECTOR</strong>，<strong>XPATH</strong>，<strong>LINK_TEXT</strong>，<strong>CLASS_NAME</strong>等等。其中<strong>LINK_TEXT</strong>表示要定位某链接，这个链接的文本可以与其匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element(By.LINK_TEXT,<span class="string">&quot;新闻&quot;</span>).click()</span><br></pre></td></tr></table></figure><p>对于<strong>XPATH</strong>代码，在开发者工具中定位到页面节点后，可以直接复制<strong>XPATH</strong>代码。</p><p>如果使用<strong>CLASS_NAME</strong>定位元素，则可能会有多个匹配项，所以结果会以<strong>列表</strong>的形式返回。</p><h2 id="PhantomJS配合Selenium使用"><a href="#PhantomJS配合Selenium使用" class="headerlink" title="PhantomJS配合Selenium使用"></a>PhantomJS配合Selenium使用</h2><p>一些复杂的页面使用<strong>JS</strong>渲染，有很多的后台请求，单纯的依靠分析<strong>HTML</strong>来定位较为困难。</p><p>再者，<strong>Selenium</strong>使用过程中，浏览器一页一页在我们眼前被打开，但我们希望在跑<strong>Selenium</strong>程序的时候还可以做一些其他的事情。</p><p>所以，引入了<strong>PhantomJS</strong>， 在<a href="https://phantomjs.org/download.html">Download PhantomJS</a> 下载后，解压并且bin文件夹下的可执行文件配置到环境变量中。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Selenium&lt;/strong&gt;用于实现网页的自动化操作，可跨浏览器使用，也可跨语言使用，在&lt;strong&gt;php&lt;/strong&gt;，&lt;strong&gt;Java&lt;/strong&gt;，&lt;strong&gt;python&lt;/strong&gt;等多门语言中均可使用。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;首先需要安装&lt;strong&gt;selenium&lt;/strong&gt;库，可根据&lt;strong&gt;python&lt;/strong&gt;环境使用&lt;strong&gt;conda&lt;/strong&gt;安装或&lt;strong&gt;pip&lt;/strong&gt;安装，&lt;code&gt;pip install selenium&lt;/code&gt;，安装成功后进入&lt;strong&gt;python&lt;/strong&gt;交互环境，在&lt;code&gt;import selenium&lt;/code&gt;没有报错的情况下，说明安装成功。&lt;/p&gt;
&lt;p&gt;之后还需要为浏览器下载&lt;strong&gt;webdriver&lt;/strong&gt;驱动，在 &lt;a href=&quot;https://www.selenium.dev/downloads/&quot;&gt;Downloads | Selenium&lt;/a&gt; 中找到自己要驱动的浏览器并且下载对应的版本，版本号要与当前浏览器的版本相符，不然会出现启动浏览器后网址会只显示data;，的情况。不过也问题不大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webdriver&lt;/strong&gt;下载好后的&lt;strong&gt;exe&lt;/strong&gt;文件，可以放在自己的&lt;strong&gt;python&lt;/strong&gt;安装目录下，这是省去了为&lt;strong&gt;webdriver&lt;/strong&gt;配置环境变量的麻烦。&lt;/p&gt;</summary>
    
    
    
    
    <category term="learn" scheme="https://lw02kx10.github.io/tags/learn/"/>
    
    <category term="python" scheme="https://lw02kx10.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="https://lw02kx10.github.io/2023/01/19/SQL/"/>
    <id>https://lw02kx10.github.io/2023/01/19/SQL/</id>
    <published>2023-01-19T07:35:21.000Z</published>
    <updated>2023-01-19T13:45:09.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL语言概述"><a href="#SQL语言概述" class="headerlink" title="SQL语言概述"></a>SQL语言概述</h2><p><strong>SQL</strong>是<strong>结构化查询语言</strong>的缩写 ,是用<strong>SQL</strong>的原因是<strong>内存</strong>是高电压为1，低电压为0，断电后数据不再被存储，所以不保险。</p><blockquote><p><strong>SQL</strong>语言使用了所谓<code>ORM</code>思想即<code>Object Relational Mapping</code>，<strong>一个数据库中有很多表</strong>，每一个表相当于一个<strong>Java</strong>类，每一个表中的记录（行）相当于一个Java类的对象实例，每一个表中的每一列相当于一个<strong>Java</strong>类的属性（或字段field）。</p></blockquote><p><code>DB</code>即数据库，<code>DBMS</code>即数据库管理系统（总管多个数据库），<code>RDBMS</code>即关系型数据库管理系统。</p><p>数据库一共有三种模型：</p><ul><li>层次模型（类树）</li><li>网状模型（类图）</li><li><strong>关系模型（二维表格）（主流数据库）</strong></li></ul><p><strong>非关系型数据库</strong>是关系型数据库的<strong>阉割版本</strong>，基于<strong>键值对</strong>存储数据，不需要经过<code>SQL</code>层的解析，<strong>性能非常高</strong>。</p><span id="more"></span><p><strong>SQL</strong>的分类：</p><blockquote><p><code>DDL</code>:数据定义语言，<strong>CREATE</strong> &#x2F; <strong>ALTER</strong> &#x2F; <strong>DROP</strong> &#x2F; <strong>RENAME</strong> &#x2F; <strong>TRUNCATE</strong></p><p><code>DML</code>:数据操作语言，<strong>INSERT</strong> &#x2F; <strong>DELETE</strong> &#x2F; <strong>UPDATE</strong> &#x2F; <strong>SELECT</strong> 分别对应<strong>增删改查</strong></p><p><code>DCL</code>:数据控制语言，<strong>COMMIT</strong> &#x2F; <strong>ROLLBACK</strong> &#x2F; <strong>SAVEPOINT</strong> &#x2F; <strong>GRANT</strong> &#x2F; <strong>REVOKE</strong></p></blockquote><p>​<strong>COMMIT</strong>表示提交数据，一旦执行，那么数据就被永久地保存在了数据库中，</p><p>​<strong>ROLLBACK</strong>表示撤销，回滚到最近的一次<strong>COMMIT</strong>之后。</p><hr><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL杂项"><a href="#MySQL杂项" class="headerlink" title="MySQL杂项"></a>MySQL杂项</h3><p>注释方式：<code>#</code>,    <code>-- </code>,    <code>/**/</code></p><p>命令行登录：<code>mysql -uroot -P(端口号) -p -h(主机)</code></p><p>命令行中导入数据库：<code>source + 绝对路径名</code>，然后<code>SHOW DATABASES</code>时就会发现多了一个数据库，就是导入的数据库。</p><p><strong>MySQL</strong>在 Windows 环境下是大小写不敏感的， 在 Linux 环境下是大小写敏感的 。</p><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的 </li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul><p>推荐采用统一的书写规范： 数据库名、表名、表别名、字段名、字段别名等都小写,  <strong>SQL 关键字、函数名、绑定变量</strong>等都大写 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 基本使用</span><br><span class="line">SHOW DATABASES; #列出所有数据库</span><br><span class="line">CREATE DATABASE database1; #创建一个数据库</span><br><span class="line">DROP DATABASE database1; #删除某个数据库</span><br><span class="line">USE database1;  #选择一个数据库</span><br><span class="line">SHOW TABLES;  #列出当前数据库中的所有表</span><br></pre></td></tr></table></figure><h4 id="运算符知识"><a href="#运算符知识" class="headerlink" title="运算符知识"></a>运算符知识</h4><ul><li>在<strong>Java</strong>中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在<strong>MySQL</strong>中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，<strong>如果转失败，就按0计算</strong>。（补充：<strong>MySQL</strong> 中字符串拼接要使用字符串函数<code>CONCAT()</code>实现）  </li><li>在数学运算中，0不能用作除数，在<strong>MySQL</strong>中，一个数除以0为NULL。 </li><li>注意<strong>MySQL</strong>中的等于运算符只有一个<code>=</code>， 如果等号两边的值一个是整数，另一个是字符串，则<strong>MySQL</strong>会将字符串转化为数字进行比较。如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。 <ul><li><strong>SQL</strong>中的赋值语句是<code>:=</code></li></ul></li><li>还有一个<strong>安全</strong>等于运算符<code>&lt;=&gt;</code>，与<code>=</code>的区别是在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL 时，其返回值为0，而不为NULL。 </li><li>不等于运算符<code>&lt;&gt;或者!=</code>不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，或两边都为NULL，则结果为NULL。</li></ul><hr><h3 id="SELECT语句（查）"><a href="#SELECT语句（查）" class="headerlink" title="SELECT语句（查）"></a>SELECT语句（查）</h3><p><strong>SELECT</strong>语句简单使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/*SELECT 语句的简单使用*/</span><br><span class="line"></span><br><span class="line">SELECT 1+1,2*3 FROM DUAL;  </span><br><span class="line">#伪表查询1+1,2*3的值，一种查询常数的方式</span><br><span class="line">SELECT 1 FROM departments;  </span><br><span class="line">#查询departments表的第一列</span><br><span class="line">SELECT id,telephone FROM departments; </span><br><span class="line">#查询列名为id和列名为telephone的那两列</span><br><span class="line"></span><br><span class="line">SELECT last_name (AS) &quot;name&quot;, salary*2 &quot;annual salary&quot; FROM employees; </span><br><span class="line">#在查询的时候给列名起别名，AS关键词可以省略，起的别名最好使用双引号括起来</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT id FROM departments; </span><br><span class="line">#在查询的时候去重</span><br><span class="line"></span><br><span class="line">SELECT salary*2 &quot;annual salary&quot; FROM employees; </span><br><span class="line">#所有运算符或列值遇到null值，运算的结果都为null</span><br><span class="line"></span><br><span class="line">SELECT * FROM `order`; </span><br><span class="line">#在表名为关键字的时候，要使用反引号引住，防止发生歧义，*号为通配符</span><br><span class="line"></span><br><span class="line">SELECT &#x27;China&#x27; AS &quot;country&quot;, last_name &quot;name&quot; FROM employees; </span><br><span class="line">#定义一组常数列，列名为country，这一列的所有值都为China，这列和name列合并到一起</span><br><span class="line"></span><br><span class="line">SELECT name FROM students WHERE score = 100; </span><br><span class="line">#将成绩为100的学生名字过滤出来</span><br></pre></td></tr></table></figure><p>可以用<code>DESC employees</code>显示一个表的结构，呈现出表的<strong>各列的类型，默认值</strong>等等。</p><p><strong>SELECT</strong>语句 + <strong>WHERE</strong>筛选：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*SELECT语句 + WHERE筛选*/</span><br><span class="line"></span><br><span class="line">SELECT id,name FROM employees WHERE name IS NULL;</span><br><span class="line"></span><br><span class="line">SELECT LEAST(1,0,2), LEAST(&#x27;a&#x27;,&#x27;c&#x27;,&#x27;b&#x27;) FROM DUAL; </span><br><span class="line">#选取最小值，当参数中有NULL的时候，返回值为NULL，选择最大值为GREATEST</span><br><span class="line"></span><br><span class="line">SELECT id,name FROM employees WHERE id BETWEEN 100 AND 200; </span><br><span class="line">#筛选出id在[100,200]之间的</span><br><span class="line"></span><br><span class="line">SELECT id,name FROM employees WHERE id IN (100,101,102); </span><br><span class="line">#筛选出id是这三个数的</span><br></pre></td></tr></table></figure><p><strong>LIKE</strong>运算符的模糊匹配规则：</p><blockquote><p>（1）<code>%</code>：匹配0个或多个字符<br>（2）<code>_</code>：只能匹配一个字符</p></blockquote><ul><li>如：匹配所有字符串中含a的字符串：<code>LIKE &quot;%a%&quot;</code></li></ul><p><strong>正则表达式</strong>精确匹配规则：</p><blockquote><p>（1）<code>^</code>匹配以该字符后面的字符<strong>开头</strong>的字符串。<br>（2）<code>$</code>匹配以该字符前面的字符<strong>结尾</strong>的字符串。<br>（3）<code>.</code>匹配任何一个<strong>单字符</strong>。如<code>&quot;b.t&quot;</code>可以匹配’<code>bit&#39;,&#39;bat&#39;,&#39;but&#39;,&#39;bite&#39;</code><br>（4）<code>+</code>匹配前面的字符<strong>至少一次</strong>。如<code>&quot;ba+&quot;</code>可以匹配<code>&#39;battle&#39;</code>，而<code>&quot;ba&#123;3&#125;&quot;</code>则表示匹配a至少3次，而<code>&quot;ba&#123;3,5&#125;&quot;</code>则表示匹配a至少3次,至多5次<br>（5）<code>[...]</code>匹配在方括号内的任何字符。例如，<code>[abc]</code>匹配“a”或“b”或“c”。为了命名字符的范围，使用一。而<code>[^...]</code>则匹配不在括号内的任何字符，<code>&quot;[a-z]&quot;</code>匹配<strong>任何字母</strong>，而<code>“[0-9]”</code>匹配<strong>任何数字</strong>。<br>（6）<code>*</code>匹配<strong>零个或多个在它前面</strong>的字符。例如，<code>x*</code>匹配任何数量的‘x’字符，<code>&quot;[0-9]*&quot;</code>匹配任何数量的数字，而<code>&quot;*&quot;</code>匹配<strong>任何数量的任何字符</strong>。</p></blockquote><ul><li><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM fruits WHERE f_name REGEXP &#x27;on|ap&#x27;; </span><br><span class="line">#在fruits表中，查询f_name字段值包含字符串“on”或者“ap”的记录</span><br><span class="line"></span><br><span class="line">SELECT * FROM fruits WHERE f_id REGEXP &#x27;[^a-e1-2]&#x27;</span><br><span class="line">#在fruits表中，查询f_id字段中包含字母a~e和数字1~2以外字符的记录</span><br></pre></td></tr></table></figure></li></ul><p><strong>SELECT</strong>+<strong>ORDER BY</strong>排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,name FROM students ORDER BY score; </span><br><span class="line">#默认按升序排列</span><br><span class="line">SELECT id,name FROM students ORDER BY score DESC; </span><br><span class="line">#指定以成绩的降序排列,&#x27;ASC&#x27;是升序</span><br><span class="line"></span><br><span class="line">SELECT id,name FROM students ORDER BY score,id DESC; </span><br><span class="line">#如果成绩相同，那么再按照id进行排序</span><br><span class="line"></span><br><span class="line">SELECT id,name FROM (</span><br><span class="line">SELECT id,name,score FROM students</span><br><span class="line">ORDER BY score DESC;</span><br><span class="line">) WHERE score &gt;= 95;</span><br><span class="line">#结合WHERE和排序进行嵌套查询</span><br></pre></td></tr></table></figure><p><strong>SELECT</strong>+<strong>LIMIT</strong>分页：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students LIMIT 0,10; </span><br><span class="line">#返回第1-10行的记录</span><br><span class="line">SELECT * FROM students LIMIT 10,10; </span><br><span class="line">#返回第11-20行的记录</span><br><span class="line"></span><br><span class="line">#分页显示公式：</span><br><span class="line">SELECT * FROM table LIMIT (pageNumber - 1)*pageSize, pageSize; </span><br><span class="line">#pageNumber为要查询的页数，pageSize为分页的每页大小</span><br></pre></td></tr></table></figure><p><strong>多表查询：</strong> 这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有<strong>关联字段</strong>，这个 关联字段可能建立了外键，也可能没有建立外键。比如：<strong>员工表和部门表</strong>，这两个表依靠<strong>“部门编号”</strong>进 行关联。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name, department_name FROM employees, departments; </span><br><span class="line">#会出现笛卡尔积</span><br><span class="line"></span><br><span class="line">#用WHERE来避免笛卡尔积：</span><br><span class="line">SELECT last_name, department_name </span><br><span class="line">FROM employees, departments </span><br><span class="line">WHERE employees.department_id = departments.department_id; </span><br><span class="line">#employees和departments有相同的一列就是department_id</span><br><span class="line"></span><br><span class="line">#用表的别名简化查询：需要注意的是，如果我们使用了表的别名，</span><br><span class="line">#在查询字段中、过滤条件中就只能使用别名进行代替，不能使用原有的表名，否则就会报错。</span><br><span class="line">SELECT e.employee_id, e.last_name, d.department_id</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id = d.department_id;</span><br><span class="line">#使用JOIN...ON...语法实现上面的代码：</span><br><span class="line">SELECT e.employee_id, e.last_name, d.department_id</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id;</span><br><span class="line">#JOIN表连接，ON表示筛选</span><br><span class="line">#如果需要连接第三个表，则只需要再紧接着跟一个JOIN即可</span><br><span class="line"></span><br><span class="line">#自连接查询时，只需要把一张表重新复制一份，当成两张不同的表来做</span><br><span class="line">SELECT emp.employee_id, emp.employee_name, mgr.employee_name, mgr.employee_id </span><br><span class="line">FROM employees emp, employees mgr </span><br><span class="line">WHERE emp.manager_id = mgr.employee_id;</span><br><span class="line"></span><br><span class="line">#同上，体会一下CONCAT的函数方式</span><br><span class="line">SELECT CONCAT(worker.last_name ,&#x27; works for &#x27;</span><br><span class="line">, manager.last_name)</span><br><span class="line">FROM employees worker, employees manager</span><br><span class="line">WHERE worker.manager_id = manager.employee_id ;</span><br></pre></td></tr></table></figure><p><strong>外连接</strong>知识点：上面做的都是<strong>内连接</strong>，外连接包括<strong>左外连接</strong>和<strong>右外连接</strong>和<strong>满外连接</strong>，如果有左表A和右表B，那么<code>A∪(A ∩ B)</code>是左外连接，<code>A ∩ B</code>是内连接，而<code>A∪B</code>则是满外连接</p><p>使用场景：如左外连接，因为<strong>有的员工可能没有部门</strong>，所以使用内连接那个没有部门的员工出不来，故应该使用外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.employee_id, e.last_name, d.department_id</span><br><span class="line">FROM employees e LEFT JOIN departments d #右外连接则把LEFT改为RIGHT</span><br><span class="line">ON e.department_id = d.department_id;</span><br><span class="line"></span><br><span class="line">#使用以下语法可以解决满外连接的问题</span><br><span class="line">#UNION:合并并且去重</span><br><span class="line">#UNION ALL:合并但是不去重</span><br><span class="line">#注意：执行UNION ALL语句时所需要的资源比UNION语句少。</span><br><span class="line">#如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/19/tqSmuWza8bnpw3j.png" alt="引用自尚硅谷"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#左中图：</span><br><span class="line">SELECT e.employee_name, d.department_name</span><br><span class="line">FROM employees e LEFT JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id</span><br><span class="line">WHERE d.department_id IS NULL;</span><br><span class="line"></span><br><span class="line">#左下图：</span><br><span class="line">SELECT e.employee_name, d.department_name</span><br><span class="line">FROM employees e LEFT JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id</span><br><span class="line">WHERE d.department_id IS NULL;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT e.employee_name, d.department_name</span><br><span class="line">FROM employees e RIGHT JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id;</span><br></pre></td></tr></table></figure><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="单值函数"><a href="#单值函数" class="headerlink" title="单值函数"></a>单值函数</h4><p><strong>数值函数：</strong></p><ul><li><code>ABS()</code>，<code>SIGN()</code>如果是正数返回1，如果是负数返回-1，0返回0。</li><li><code>PI()</code>返回圆周率的值。</li><li><code>CEILING()</code>，<code>FLOOR()</code>。</li><li><code>RAND()</code>返回0-1的随机数。<code>RAND(x)</code>返回0-1的随机数，其中x的值用作种子值，相同的x值会产生相同的随机数，<code>ROUND(x)</code>对x四舍五入后的值,<code>ROUND(x,y)</code>保留到小数点后y位。</li><li><code>TRUNCATE(x,y)</code>对x进行截断，截断到小数点后y位。</li><li><code>SQRT(x)</code>,x为负数的时候返回NULL。</li><li><code>RADIANS(x)</code>把角度转换为弧度，<code>DEGREES(x)</code>把弧度转换为角度。</li><li><code>SIN()</code>,<code>COS()</code>,<code>TAN()</code></li><li><code>POW(x,y)</code>，<code>EXP(x)</code>，<code>LOG(x)</code>以e为对数，<code>LOG2(x),LOG10(x)</code></li><li><code>BIN(x)</code>,<code>HEX(x)</code>,<code>OCT(x)</code>分表表示把x转换为2,16,8进制，<code>CONV(x,f1,f2)</code>把x从f1进制转换为f2进制</li></ul><p><strong>字符串函数：</strong></p><ul><li>注：<strong>MySQL</strong>中的字符串位置是从1开始的</li><li><code>LENGTH(s)</code>返回字节数。</li><li><code>CHAR_LENGTH(s)</code>返回字符个数。</li><li><code>CONCAT(s1,s2,...,sn)</code>，<code>UPPER(s)</code>,<code>LOWER(s)</code>。</li><li><code>REPLACE(str,s1,s2)</code>用s2替换str中的s1。</li><li><code>INSERT(str,idx,len,replacestr)</code>，<code>SUBSTR(str,idx,len)</code>，<code>REVERSE(s)</code></li></ul><p><strong>时间与日期函数：</strong></p><ul><li><code>CURDATE()</code>仅包含年月，<code>CURTIME()</code>仅包含时分秒，<code>NOW()</code>返回当前系统的日期和时间</li><li><code>UNIX_TIMESTAMP()</code>把当前时间转化为时间戳，<code>UNIX_TIMESTAMP(date)</code>把指定时间转换为时间戳，<code>FROM_UNIXTIME(timestamp)</code>把时间戳转换为普通规格的日期时间</li><li><code>YEAR(date)</code>,<code>MONTH(date)</code>,<code>DAY(date)</code>，<code>HOUR(time)</code>,<code>MINUTE(time)</code>,<code>SECOND(time)</code></li><li><code>EXTRACT(type FROM date)</code>返回自己想要返回的时间或者日期类型</li><li><code>TIME_TO_SEC(time)</code>,<code>SEC_TO_TIME(seconds)</code></li><li><code>DATE_FORMAT(date,fmt)</code>,<code>TIME_FORMAT(time,fmt)</code>，<code>STR_TO_DATE(str,fmt)</code>将字符串按照fmt格式进行解析（<strong>fmt</strong>格式需要进行查询）</li></ul><p><strong>流程控制函数：</strong></p><ul><li><code>IF(value1,value2,value3)</code>如果value1为真的话返回value2,否则返回value3</li><li><code>IFNULL(value1,value2)</code>如果value1不为NULL则返回value1，否则返回value2</li><li><code>switch...case</code>类：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT CASE</span><br><span class="line">WHEN num &gt; 1 THEN &#x27;1&#x27;</span><br><span class="line">WHEN num &gt; 0 THEN &#x27;2&#x27;</span><br><span class="line">ELSE &#x27;3&#x27;</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">SELECT employee_id,salary, </span><br><span class="line">CASE WHEN salary&gt;=15000 THEN &#x27;高薪&#x27;</span><br><span class="line">WHEN salary&gt;=10000 THEN &#x27;潜力股&#x27;</span><br><span class="line">WHEN salary&gt;=8000 THEN &#x27;屌丝&#x27;</span><br><span class="line">ELSE &#x27;草根&#x27; END &quot;描述&quot;  #注：END后面跟的字符串是自定义的列名</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><strong>加密与解密函数：</strong></p><ul><li><code>PASSWORD(str)</code>返回str的加密版本，加密结果<strong>不可逆</strong>，返回一个41位长的字符串，常用于用户的密码加密</li><li><code>MD5(str)</code>用str进行加密，<code>SHA(str)</code>也是一种加密方式，比前者更加安全</li><li><code>ENCODE(value,password_seed)</code>返回使用<code>password_seed</code>作为加密密码加密value</li><li><code>DECODE(vlaue,password_seed)</code>用于解密</li></ul><p><strong>MySQL信息函数：</strong></p><ul><li><code>CONNECTION_ID()</code>返回当前<strong>MySQL</strong>服务器的连接数</li><li><code>DATABASE()</code>返回命令行当前所在的数据库</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SQL语言概述&quot;&gt;&lt;a href=&quot;#SQL语言概述&quot; class=&quot;headerlink&quot; title=&quot;SQL语言概述&quot;&gt;&lt;/a&gt;SQL语言概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;是&lt;strong&gt;结构化查询语言&lt;/strong&gt;的缩写 ,是用&lt;strong&gt;SQL&lt;/strong&gt;的原因是&lt;strong&gt;内存&lt;/strong&gt;是高电压为1，低电压为0，断电后数据不再被存储，所以不保险。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;语言使用了所谓&lt;code&gt;ORM&lt;/code&gt;思想即&lt;code&gt;Object Relational Mapping&lt;/code&gt;，&lt;strong&gt;一个数据库中有很多表&lt;/strong&gt;，每一个表相当于一个&lt;strong&gt;Java&lt;/strong&gt;类，每一个表中的记录（行）相当于一个Java类的对象实例，每一个表中的每一列相当于一个&lt;strong&gt;Java&lt;/strong&gt;类的属性（或字段field）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;DB&lt;/code&gt;即数据库，&lt;code&gt;DBMS&lt;/code&gt;即数据库管理系统（总管多个数据库），&lt;code&gt;RDBMS&lt;/code&gt;即关系型数据库管理系统。&lt;/p&gt;
&lt;p&gt;数据库一共有三种模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;层次模型（类树）&lt;/li&gt;
&lt;li&gt;网状模型（类图）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系模型（二维表格）（主流数据库）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;非关系型数据库&lt;/strong&gt;是关系型数据库的&lt;strong&gt;阉割版本&lt;/strong&gt;，基于&lt;strong&gt;键值对&lt;/strong&gt;存储数据，不需要经过&lt;code&gt;SQL&lt;/code&gt;层的解析，&lt;strong&gt;性能非常高&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SQL" scheme="https://lw02kx10.github.io/tags/SQL/"/>
    
    <category term="learn" scheme="https://lw02kx10.github.io/tags/learn/"/>
    
  </entry>
  
</feed>
